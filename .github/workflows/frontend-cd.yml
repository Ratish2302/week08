# week08/.github/workflows/frontend-cd.yml
name: CD - Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'wk08-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'wk08-rg'

  workflow_call:
    inputs:
      product_api_ip:       { required: true, type: string }
      order_api_ip:         { required: true, type: string }
      aks_cluster_name:     { required: true, type: string }
      aks_resource_group:   { required: true, type: string }

env:
  # Variable (Settings → Secrets and variables → Actions → Variables)
  # e.g. ACR_NAME = wk08acr12345
  ACR_NAME: ${{ vars.ACR_NAME }}
  # Secret (Settings → Secrets → Actions) e.g. CONTAINER_REGISTRY = wk08acr12345.azurecr.io
  ACR_LOGIN_SERVER: ${{ secrets.CONTAINER_REGISTRY }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"   frontend/main.js
          echo "---- main.js after injection ----"
          tail -n +1 frontend/main.js | sed -n '1,80p'

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ inputs.aks_resource_group }}
          cluster-name: ${{ inputs.aks_cluster_name }}

      - name: Apply frontend manifest (if present)
        run: |
          if [ -f k8s/frontend.yaml ]; then
            kubectl apply -f k8s/frontend.yaml
          fi

      - name: Ensure deployment uses image from your ACR
        run: |
          DEPLOY=$(kubectl get deploy -o name | grep -i frontend)
          CONTAINER=$(kubectl get $DEPLOY -o jsonpath="{.spec.template.spec.containers[*].name}")
          kubectl set image $DEPLOY $CONTAINER=${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          kubectl rollout status $DEPLOY

      - name: Logout from Azure
        if: always()
        run: az logout
